ldc 0 ;ai state

ldc 0
ldc 0
ldc 0
ldc 0
ldc 0
ldc 0
cons
cons
cons
cons
cons
ldc 0
ldc 0
ldc 2
ldc 0
ldc 0
ldc 0
cons
cons
cons
cons
cons
ldc 0
ldc 4
ldc 5
ldc 1
ldc 0
ldc 0
cons
cons
cons
cons
cons
ldc 0
ldc 0
ldc 0
ldc 0
ldc 0
ldc 0
cons
cons
cons
cons
cons
ldc 0
cons
cons
cons
cons ;world

ldc 0 ;vitality
ldc 2 ;x
ldc 2 ;y
cons
ldc 1 ;dir
ldc 0
cons
cons
cons ;pacman

ldc 0
cons
cons ; game state

ldf $step
ap 2
rtn

$step: ;aistate gamestate
ldc 0  ; new aistate

ld 0 1 ; game state
ldc 1
ldf $nth
ap 2   ; pacman state
ldc 1
ldf $nth
ap 2   ; pacman (x y)
ldf $urdl
ap 1   ; [u d l r]

ld 0 1 ; game state
ldc 0
ldf $nth
ap 2   ; world
ldf $gen-world-fun
ap 1
ldf $map
ap 2

; set 3/4/5/6 to 1
ldf $normalize
ldf $map
ap 2

; zip-with-index
ldf $zip-with-index
ap 1

brk

; filter out opposite direction
ldc 2
ldc 3
ldc 0
ldc 1
ldc 4
ldf $mk-list
ap 1
ld 0 1 ; game state
ldc 1
ldf $nth
ap 2   ; pacman state
ldc 2
ldf $nth
ap 2   ; pacman direction
ldf $nth
ap 2   ; opposite direction
ldf $gen-cdr-not-eq
ap 1
ldf $filter
ap 2

brk

; max by car
ldc 0
ldc 0
cons ; (0 0)
ldf $max-by-car
ldf $fold-left
ap 3

; get direction from cons
cdr

; done!
cons
rtn

$gen-cdr-not-eq: ;x
ldf $gen-cdr-not-eq-inner
rtn
$gen-cdr-not-eq-inner: ;x
ld 1 0
ld 0 0
cdr
ceq
tsel $gen-cdr-not-eq-inner-eq $gen-cdr-not-eq-inner-neq
$gen-cdr-not-eq-inner-eq:
ldc 0
rtn
$gen-cdr-not-eq-inner-neq:
ldc 1
rtn

$gen-world-fun: ;world
ldf $gen-world-fun-inner
rtn
$gen-world-fun-inner: ;(x y)
ld 1 0
ld 0 0
ldf $world
ap 2
rtn

$normalize: ;x
ld 0 0
ldc 3
cgte
tsel $normalize-true $normalize-false
$normalize-true:
ldc 1
rtn
$normalize-false:
ld 0 0
rtn

$max-by-car: ; max next
ld 0 0
car
ld 0 1
car
cgt
tsel $max-by-car-first $max-by-car-second
$max-by-car-first:
ld 0 0
rtn
$max-by-car-second:
ld 0 1
rtn

$nth: ;lst i
ld 0 1 ;i
ldc 0
ceq
tsel $nth1 $nth2
$nth1:
ld 0 0 ;lst
car
rtn
$nth2:
ld 0 0 ;lst
cdr
ld 0 1 ;i
ldc 1
sub
ldf $nth
tap 2

$world: ;world (x y)
ld 0 0 ;world
ld 0 1
cdr    ;y
ldf $nth
ap 2
ld 0 1
car    ;x
ldf $nth
ap 2
rtn

$urdl: ;(x y) returns [u r d l]
ld 0 0
ldf $u
ap 1
ld 0 0
ldf $r
ap 1
ld 0 0
ldf $d
ap 1
ld 0 0
ldf $l
ap 1
ldc 4
ldf $mk-list
ap 1
rtn

$u: ;(x y)
ld 0 0
car
ld 0 0
cdr
ldc 1
sub
cons
rtn

$r: ;(x y)
ld 0 0
car
ldc 1
add
ld 0 0
cdr
cons
rtn

$d: ;(x y)
ld 0 0
car
ld 0 0
cdr
ldc 1
add
cons
rtn

$l: ;(x y)
ld 0 0
car
ldc 1
sub
ld 0 0
cdr
cons
rtn


brk
; LIST FUNCTIONS
brk

$filter: ; lst pred
ld 0 0   ; lst
ldc 0    ; nil
ldf $filter-pred
ldf $fold-left
ap 3
ldf $reverse
ap 1
rtn
$filter-pred: ; acc next
ld 0 1   ; next
ld 1 1   ; pred
ap 1
tsel $filter-pred-true $filter-pred-false
$filter-pred-true:
ld 0 1   ; next
ld 0 0   ; acc
cons
rtn
$filter-pred-false:
ld 0 0   ; acc
rtn

$zip-with-index: ; lst
ld 0 0       ; lst
ld 0 0
ldf $length
ap 1         ; len lst
ldf $range
ap 1         ; 0..n
ldf $zip
ap 2         ; zip lst 0..n
rtn

$zip: ; a b
ld 0 0
ld 0 1
ldc 0  ; nil
ldf $zip_iter
ap 3
rtn
$zip_iter: ; a b out
ld 0 0
atom
tsel $zip_done $zip_next
$zip_next:
ld 0 1
atom
tsel $zip_done $zip_cont
$zip_done:
ld 0 2
ldf $reverse
ap 1
rtn
$zip_cont:
ld 0 0
cdr    ; tail a
ld 0 1
cdr    ; tail b
ld 0 0
car    ; head a
ld 0 1
car    ; head b
cons   ; (a b)
ld 0 2
cons   ; (a b) :: out
ldf $zip_iter
tap 3

$length: ;lst
ldc 0
ld 0 0
ldf $length_iter
ap 2
rtn
$length_iter: ; len lst
ld 0 1
atom
tsel $length_done $length_cont
$length_done:
ld 0 0
rtn
$length_cont:
ld 0 0
ldc 1
add     ; len+1
ld 0 1
cdr     ; tail lst
ldf $length_iter
tap 2

$range: ;n
ldc 0
ld 0 0 ; n
ldf $range_iter
ap 2
rtn
$range_iter: ; i n
ld 0 0
ld 0 1
ceq
tsel $range_done $range_cont
$range_done:
ld 0 1  ; n
ldf $mk-list
ap 1
rtn
$range_cont:
ld 0 0 ; i, left on stack for mk-list
ld 0 0
ldc 1
add    ; i+1
ld 0 1 ; n
ldf $range_iter
tap 2


$mk-list: ;x
ldc 0   ; nil
ld 0 0
ldf $mk-cons
ap 1
rtn

$mk-cons: ;x
ld 0 0
ldc 0
ceq
tsel $mk-cons-zero $mk-cons-else
$mk-cons-zero:
rtn
$mk-cons-else:
cons
ld 0 0
ldc 1
sub
ldf $mk-cons
tap 1

$map: ; lst fun
ld 0 0   ; lst
ldc 0    ; nil
ldf $apply-fun
ldf $fold-left
ap 3
ldf $reverse
ap 1
rtn
$apply-fun: ; acc next
ld 0 1   ; next
ld 1 1   ; fun
ap 1
ld 0 0   ; acc
cons
rtn

$reverse: ; lst
ld 0 0   ; lst
ldc 0    ; nil
ldf $reverse_fun
ldf $fold-left
ap 3
rtn
$reverse_fun: ; acc next
ld 0 1   ; next
ld 0 0   ; acc
cons
rtn

$fold-left: ; lst acc fun
ld 0 0   ; lst
atom
tsel $fold-left-base $fold-left-rec
$fold-left-base:
ld 0 1   ; acc
rtn
$fold-left-rec:
ld 0 0
cdr      ; tail lst
ld 0 1
ld 0 0
car
ld 0 2
ap 2     ; fun acc (head list)
ld 0 2   ; fun
ldf $fold-left
tap 3
