; ghost0 chases lambda-man and runs from him when in fright mode

;#start
int 1           ; get lambda-man coordinates
mov c, a        ; store lambda-man x-ordinate in C
mov d, b        ; store lambda-man y-ordinate in D
int 3           ; get ghost index
int 5           ; get ghost position
mov e, a        ; store ghost x-ordinate in E
mov f, b        ; store ghost y-ordinate in F
int 3           ; get ghost index in A
int 6           ; get ghost vitality

jeq 12,h,1      ; skip x-ordinate if we already checked it ; jump to #checkY

;#checkX
jlt 22,e,c      ; ghost's x-ordinate is less than lambda-Man's x-ordinate ; jump to #gxLessLx
jgt 30,e,c      ; ghost's x-ordinate is greater than lambda-man's x-ordinate ; jump to #gxGreaterLx

;#checkY
jlt 38,f,d      ; ghost's y-ordinate is less than lambda-man's y-ordinate ; jump to #gyLessLy
jgt 14,f,d      ; ghost's y-ordinate is greater than lambda-man's y-ordinate ; jump to #gyGreaterLy

; Get first direction based on position of Lambda-Man

;#gyGreaterLy
mov h, 0        ; set flag that indicates we are changing y-ordinate
jeq 19,a,1      ; jump to #gyGreaterLyFright
mov c, 0        ; move up if we are in standard mode
dec f           ; set new y-ordinate
jeq 45,1,1      ; jump to #checkWall

;#gyGreaterLyFright
mov c, 2        ; move down if we are in fright mode
inc f           ; set new y-ordinate
jeq 45,1,1      ; jump to #checkWall

;#gxLessLx
mov h, 1        ; set flag that indicates we are changing x-ordinate
jeq 27,a,1      ; jump to #gxLessLxFright
mov c, 1        ; move to the right if we are in standard mode
inc e           ; set new x-ordinate
jeq 45,1,1      ; jump to #checkWall

;#gxLessLxFright
mov c, 3        ; move to the left if we are in fright mode
dec e           ; set new x-ordinate
jeq 45,1,1      ; jump to #checkWall

;#gxGreaterLx
mov h, 1        ; set flag that indicates we are changing x-ordinate
jeq 35,a,1      ; jump to #gxGreaterLxFright
mov c, 3        ; move to the left if we are in standard mode
dec e           ; set new x-ordinate
jeq 45,1,1      ; jump to #checkWall

;#gxGreaterLxFright
mov c, 1        ; move to the right if we are in fright mode
inc e           ; set new x-ordinate
jeq 45,1,1      ; jump to #checkWall

;#gyLessLy
mov h, 0        ; set flag that indicates we are changing y-ordinate
jeq 43,a,1      ; jump to #gyLessLyFright
mov c, 2        ; move down if we are in standard mode
inc f           ; set new y-ordinate
jeq 45,1,1      ; jump to #checkWall

;#gyLessLyFright
mov c, 0        ; move up if we are in fright mode
dec f           ; set new y-ordinate

; Check if we would move into wall

;#checkWall
mov a, e        ; set x-ordinate
mov b, f        ; set y-ordinate
int 7           ; get contents of new direction square
jeq 56,a,0      ; if new square is a wall, don't go there and pick new direction ; jump to #lessTravelledDirection

; check if we would go back

int 3           ; get ghost index
int 6           ; get current direction in B
mov d, c        ; copy new direction to D so we can compare it to current direction
xor d, b        ; if directions are opposed the result of xor is 2
jeq 56,d,2      ; choose new direction if we would go back ; jump to #lessTravelledDirection

mov a, c        ; copy new direction to A
jeq 67,1,1      ; jump to #makeMove

; Pick new direction based on least travelled direction

;#lessTravelledDirection
jeq 0,h,1       ; try to change y-ordinate if x doesn't work ; jump to #start
mov e, 255      ; E is min value
mov f, 0        ; F is corresponding direction
mov g, 255      ; G is candidate direction for new min

;#newDirection
inc g           ; pick new direction
jgt 64,[g],e    ; jump if count of direction G is above best so far ; jump to #allDirections

mov e, [g]      ; save new min
mov f, g        ; save direction

;#allDirections
jlt 60,g,3      ; loop back if we have not tried all 4 directions ; jump to #newDirection

mov a, f        ; set desired direction
inc [f]         ; increment count for desired direction

; Set new direction and update direction counter

;#makeMove
mov h, 0        ; reset x/y flag
int 0
int 3           ; get our ghost index in A
int 6           ; get out current direction in B
inc [b]         ; increment count for actual direction
hlt             ; stop
